{
  "exerciseId": "ImprovedStreamTokenizer_1",
  "refactoring_game_configuration": {
    "dependencies": [
      "<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.13.2</version>\n  <scope>test</scope>\n  </dependency>\n"
    ],
    "refactoring_limit": 5,
    "smells_allowed": 3,
    "level": 3,
    "ignored_smells": [
      "Lazy Test"
    ]
  },
  "check_game_configuration": {
    "questions": [
      {
        "questionTitle": "Qual è lo smell presente nel seguente metodo?",
        "questionCode": "    @Test\n    public void testAdd() { \n        int a = 15; int b = 20; \n        int expectedResult = 35;\n        //Act \n        long result = objCalcUnderTest.add(a, b);\n        //Assert\n        assertEquals(expectedResult, result);\n}\n",
        "answers": [
          {
            "answerText": "Assertion roulette",
            "isCorrect": true
          },
          {
            "answerText": "Magic number",
            "isCorrect": false
          }
        ]
      },
      {
        "questionTitle": "Qual è lo smell presente nel seguente metodo?",
        "questionCode": " \t@Test(timeout = 4000)\n\tpublic void test_11_2182() throws Throwable {\n\t\t// Boolean parsing exceptions\n\t\tString input = \"99 abc - \\n [ ] $ \\\"\";\n\t\tjava.io.StringReader reader = new java.io.StringReader(input);\n\t\tImprovedStreamTokenizer tokenizer = new ImprovedStreamTokenizer(reader);\n\n\t\tString result = \"\";\n\t\tresult += tokenizer.nextBoolean() + \",\";\n\t\tresult += tokenizer.nextBoolean() + \",\";\n\t\tresult += tokenizer.nextBoolean() + \",\";\n\t\tresult += tokenizer.nextBoolean() + \",\";\n\t\tresult += tokenizer.nextBoolean() + \",\";\n\t\tresult += tokenizer.nextBoolean() + \",\";\n\t\ttry\n\t\t{\n\t\t  result += tokenizer.nextBoolean() + \",\";\n\t\t}\n\t\tcatch (java.io.IOException e)\n\t\t{\n\t\t  result += \"non-boolean\" + \",\";\n\t\t}\n\t\tresult += tokenizer.nextBoolean();\n\n\t\tassertEquals(result, \"false,false,false,false,false,false,non-boolean,null\");\n\t\tassertNull(tokenizer.nextBoolean());\n\t}",
        "answers": [
          {
            "answerText": "Resource Optimism",
            "isCorrect": false
          },
          {
            "answerText": "Assertion Roulette",
            "isCorrect": true
          },
          {
            "answerText": "Magic Number",
            "isCorrect": false
          },
          {
            "answerText": "Unknown Test",
            "isCorrect": false
          }
        ]
      }
    ]
  },
  "auto_valutative": false
}
